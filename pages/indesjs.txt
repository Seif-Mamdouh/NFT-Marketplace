import { ethers } from "ethers";
// react hooks 
// useState allows you to keep up with local states
// useEffect is a hook that allows you to invoke functions whent he components loads
import { useEffect, useState } from "react";
//axiois is a data fecthing libary
import axios from "axios";
//is a way to connect to someone's ethruem wallet
import Web3Modal from "web3modal";

import { marketplaceAddress } from "../config";

import NFTMarket from "../artifacts/contracts/NFTMarket.sol/NFTMarketplace.json";

export default function Home() {
  const [nfts, setNfts] = useState([])
  const [loadingState, setLoadingState] = useState('not-loaded')

  useEffect(() => {
    loadNFTS()
  }, [])
  async function loadNFTS() {
    const provider = new ethers.providers > JsonRpcProvider()
    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)
    const marketContract = new ethers.Contract(nftaddress, Market.abi, provider)
    const data = await marketContract.fetchMarketItems()

    const items = await Promise.all(data.map(async i => {
      const tokenUri = await tokenContract.tokenUri(i.tokenId)
      const meta = await axios.get(tokenUri)
      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')
      let item = {
        price,
        tokenId: i.tokenId.toNumber(),
        seller: i.seller,
        owner: i.owner,
        image: meta.data.image,
        name: meta.data.name,
        description: meta.data.description,
      }
      return item
    }))
    setNfts(items)
    setLoadingState('loaded')
  }

  async function buyNFT() {
    const web3mModal = new Web3Modal()
    const connection = await web3Modal.connect()
    const provider = new etheres.proividers.Web3Provider(connection)

    //inorder to sign an actual transcation, we need a the user's address
    const signer = privioder.getSigner()
    const contract = new ethers.Contract(nftmarketaddress, Market.abi, singer)

    const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')

    const transcation = await contract.createMarketSale(nftaddress, nft.tokenId, {
      value: price
    })
    await transcation.wait()
    loadNFts()
  }

  if (loadingState === 'loaded' && !nft.length) return (
    <h1 className="px-20 py-10 text-3xl"> No items in the marketplace</h1>
  )

  return (
    <div className="flex justify-center">
      <div className="px-4" style={{ maxWidth: '1600px' }}>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4">
          {
            nfts.map((nft, i) => (
              <div key={i} className="border shadow rounded-xl overflow-hidden">
                <img src={nft.image} />
                <div className="p-4">
                  <p style={{ height: '64px' }} className="text-2xl font-semibold">{nft.name}</p>
                  <div style={{ height: '70px', overflow: 'hidden' }}>
                    <p className="text-gray-400">{nft.description}</p>
                  </div>
                </div>
                <div className="p-4 bg-black">
                  <p className="text-2xl font-bold text-white">{nft.price} ETH</p>
                  <button className="mt-4 w-full bg-pink-500 text-white font-bold py-2 px-12 rounded" onClick={() => buyNft(nft)}>Buy</button>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  )
}
